{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Hayden007/Desktop/react-projects/nba-app/src/components/StatBox.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nexport default function StatBox({\n  stat\n}) {\n  _s();\n\n  const columns = [{\n    id: 'name',\n    label: 'Name',\n    minWidth: 170\n  }, {\n    id: 'code',\n    label: 'ISO\\u00a0Code',\n    minWidth: 100\n  }, {\n    id: 'population',\n    label: 'Population',\n    minWidth: 170,\n    align: 'right',\n    format: value => value.toLocaleString('en-US')\n  }, {\n    id: 'size',\n    label: 'Size\\u00a0(km\\u00b2)',\n    minWidth: 170,\n    align: 'right',\n    format: value => value.toLocaleString('en-US')\n  }, {\n    id: 'density',\n    label: 'Density',\n    minWidth: 170,\n    align: 'right',\n    format: value => value.toFixed(2)\n  }];\n\n  function createData(name, code, population, size) {\n    const density = population / size;\n    return {\n      name,\n      code,\n      population,\n      size,\n      density\n    };\n  }\n\n  const useStyles = makeStyles({\n    root: {\n      width: '100%'\n    },\n    container: {\n      maxHeight: 440\n    }\n  });\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const statsMap = {\n    team_name: 'Team:',\n    points_per_game: 'Points Per Game:',\n    assists_per_game: 'Assists:',\n    blocks_per_game: 'Blocks:',\n    three_point_percentage: 'Three Point Percentage:',\n    field_goal_percentage: 'Field Goal Percentage:',\n    rebounds_per_game: 'Rebounds:'\n  };\n  const label = statsMap[stat.label];\n  const value = stat.label.includes('percentage') ? `${stat.value}%` : stat.value;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n        className: classes.container,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          stickyHeader: true,\n          \"aria-label\": \"sticky table\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n                align: column.align,\n                style: {\n                  minWidth: column.minWidth\n                },\n                children: label\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 17\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n              return /*#__PURE__*/_jsxDEV(TableRow, {\n                hover: true,\n                role: \"checkbox\",\n                tabIndex: -1,\n                children: columns.map(column => {\n                  const value = row[column.id];\n                  return /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: column.align,\n                    children: column.format && typeof value === 'number' ? column.format(value) : value\n                  }, column.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 108,\n                    columnNumber: 23\n                  }, this);\n                })\n              }, row.code, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n        rowsPerPageOptions: [10, 25, 100],\n        component: \"div\",\n        count: rows.length,\n        rowsPerPage: rowsPerPage,\n        page: page,\n        onChangePage: handleChangePage,\n        onChangeRowsPerPage: handleChangeRowsPerPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), label, value]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(StatBox, \"1LSjuq2DZUwZxE9BYIdgLLfYYP4=\", true);\n\n_c = StatBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"StatBox\");","map":{"version":3,"sources":["/Users/Hayden007/Desktop/react-projects/nba-app/src/components/StatBox.js"],"names":["React","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","StatBox","stat","columns","id","label","minWidth","align","format","value","toLocaleString","toFixed","createData","name","code","population","size","density","useStyles","root","width","container","maxHeight","classes","page","setPage","useState","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","target","statsMap","team_name","points_per_game","assists_per_game","blocks_per_game","three_point_percentage","field_goal_percentage","rebounds_per_game","includes","map","column","rows","slice","row","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nexport default function StatBox({ stat }) {\n    const columns = [\n        { id: 'name', label: 'Name', minWidth: 170 },\n        { id: 'code', label: 'ISO\\u00a0Code', minWidth: 100 },\n        {\n          id: 'population',\n          label: 'Population',\n          minWidth: 170,\n          align: 'right',\n          format: (value) => value.toLocaleString('en-US'),\n        },\n        {\n          id: 'size',\n          label: 'Size\\u00a0(km\\u00b2)',\n          minWidth: 170,\n          align: 'right',\n          format: (value) => value.toLocaleString('en-US'),\n        },\n        {\n          id: 'density',\n          label: 'Density',\n          minWidth: 170,\n          align: 'right',\n          format: (value) => value.toFixed(2),\n        },\n      ];\n      \n      function createData(name, code, population, size) {\n        const density = population / size;\n        return { name, code, population, size, density };\n      }\n      \n      const useStyles = makeStyles({\n        root: {\n          width: '100%',\n        },\n        container: {\n          maxHeight: 440,\n        },\n      });\n      \n\n        const classes = useStyles();\n        const [page, setPage] = React.useState(0);\n        const [rowsPerPage, setRowsPerPage] = React.useState(10);\n      \n        const handleChangePage = (event, newPage) => {\n          setPage(newPage);\n        };\n      \n        const handleChangeRowsPerPage = (event) => {\n          setRowsPerPage(+event.target.value);\n          setPage(0);\n        };\n        \n    const statsMap = {\n        team_name: 'Team:',\n        points_per_game: 'Points Per Game:',\n        assists_per_game: 'Assists:',\n        blocks_per_game: 'Blocks:',\n        three_point_percentage: 'Three Point Percentage:',\n        field_goal_percentage: 'Field Goal Percentage:',\n        rebounds_per_game: 'Rebounds:'\n    }\n\n    \n\n\n    const label = statsMap[stat.label];\n    const value = stat.label.includes('percentage') ? `${stat.value}%` : stat.value;\n\n    return (\n        <div>\n            <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n          \n            {label}\n            {value}\n            \n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}